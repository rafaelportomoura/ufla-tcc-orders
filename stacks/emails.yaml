AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Parameters:
    Stage:
        Type: String
    Tenant:
        Type: String
    Microservice:
        Type: String
    LogLevel:
        Type: String
        AllowedValues:
          - error
          - warn
          - log
          - info
          - verbose
          - debug
          - silent
Globals:
    Function:
        Timeout: 60
        Runtime: nodejs20.x
        Environment:
            Variables:
                STAGE: !Ref Stage
                TENANT: !Ref Tenant
                REGION: !Ref AWS::Region
                ACCOUNT_NUMBER: !Ref AWS::AccountId
                MICROSERVICE: !Ref Microservice
                LOG_LEVEL: !Ref LogLevel
                SELL_TEMPLATE: !Sub ${Stage}-${Tenant}${Microservice}-order-approval
                EMAIL_SQS: !Sub https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/${Stage}-${Tenant}-contact-bridges-send-email-sqs


Resources:
    SellEmailTemplate:
        Type: AWS::SES::Template
        Properties:
            Template: 
                HtmlPart: O seu pedido {{order_id}} foi aprovado!
                SubjectPart: O seu pedido foi aprovado!
                TemplateName: !Sub ${Stage}-${Tenant}${Microservice}-order-approval
                TextPart: O seu pedido foi aprovado!
    LambdaRole:
        Type: "AWS::IAM::Role"
        Properties:
            RoleName: !Sub ${AWS::StackName}-lambda-role
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Principal:
                        Service:
                          - "lambda.amazonaws.com"
                          - "events.amazonaws.com"
                    Action:
                      - "sts:AssumeRole"
            Path: "/"
            ManagedPolicyArns:
              - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
              - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess
              - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
              - arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole
            Policies:
              - PolicyName: !Sub ${AWS::StackName}
                PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                      - Effect: "Allow"
                        Action:
                          - lambda:PublishVersion
                          - lambda:InvokeFunction
                          - apigateway:*
                          - sns:Publish
                          - sqs:SendMessage
                        Resource: "*"
            Tags:
              - Key: Service
                Value: IAM
              - Key: Resource
                Value: Role
              - Key: Name
                Value: !Sub ${AWS::StackName}-lambda-role
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice


    Sell:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub ${Stage}-${Tenant}-${Microservice}-sell
            Role: !GetAtt LambdaRole.Arn
            CodeUri: ./../
            Handler: dist/handlers/sell.sell
            VpcConfig:
                SubnetIds: !Split [',', {'Fn::ImportValue': !Sub "${Stage}-${Tenant}-private-subnets-list"}]
                SecurityGroupIds: 
                  - Fn::ImportValue: !Sub "${Stage}-${Tenant}-private-subnet-security-group-id"
            Tags:
                Service: Serverless
                Resource: Function
                Name: !Sub ${Stage}-${Tenant}-${Microservice}-sell
                StackName: !Ref AWS::StackName
                StackId: !Ref AWS::StackId
                Region: !Ref AWS::Region
                Microservice: !Ref Microservice
                Stage: !Ref Stage
                Tenant: !Ref Tenant                    
            Events:
                SQSEvent:
                    Type: SQS
                    Properties:
                        Queue: !GetAtt SellSQS.Arn
                        BatchSize: 1
            Tracing: PassThrough

    SellLogGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Sub /aws/lambda/${Sell}
            RetentionInDays: 1
            Tags:
              - Key: Service
                Value: CloudWatch
              - Key: Resource
                Value: LogGroup
              - Key: Name
                Value: !Sub /aws/lambda/${Sell}
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice

    SellSQS:
        Type: AWS::SQS::Queue
        Properties:
            QueueName: !Sub ${Stage}-${Tenant}-${Microservice}-sell-sqs
            DelaySeconds: 0
            VisibilityTimeout: 60
            ReceiveMessageWaitTimeSeconds: 1
            RedrivePolicy:
                deadLetterTargetArn: !GetAtt SellDLQ.Arn
                maxReceiveCount: 5
            Tags:
              - Key: Service
                Value: SQS
              - Key: Resource
                Value: Queue
              - Key: Name
                Value: !Sub ${Stage}-${Tenant}-${Microservice}-sell-sqs
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice

    SellDLQ:
        Type: AWS::SQS::Queue
        Properties:
            QueueName: !Sub ${Stage}-${Tenant}-${Microservice}-sell-dlq
            DelaySeconds: 0
            VisibilityTimeout: 60
            ReceiveMessageWaitTimeSeconds: 1
            Tags:
              - Key: Service
                Value: SQS
              - Key: Resource
                Value: Queue
              - Key: Name
                Value: !Sub ${Stage}-${Tenant}-${Microservice}-sell-dlq
              - Key: Stage
                Value: !Ref Stage
              - Key: Tenant
                Value: !Ref Tenant
              - Key: StackName
                Value: !Ref AWS::StackName
              - Key: StackId
                Value: !Ref AWS::StackId
              - Key: Region
                Value: !Ref AWS::Region
              - Key: Microservice
                Value: !Ref Microservice

    SellSNSSubscription:
        Type: 'AWS::SNS::Subscription'
        Properties:
            TopicArn:
                Fn::ImportValue: !Sub ${Stage}-${Tenant}-event-bus
            Endpoint: !GetAtt SellSQS.Arn
            Protocol: sqs
            FilterPolicy: !Sub '{"type": ["approved"], "status": ["success"], "event": ["${Microservice}"]}'

    QueuePolicy:
        Type: AWS::SQS::QueuePolicy
        Properties:
            Queues:
              - !Ref SellSQS
            PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Sid: !Sub ${Stage}-${Tenant}-${Microservice}-sell-sqs
                    Effect: Allow
                    Action:
                      - sqs:SendMessage
                    Principal:
                        Service:
                          - "sns.amazonaws.com"
                    Resource: !GetAtt SellSQS.Arn
                    Condition:
                        ArnEquals:
                            aws:SourceArn:
                                Fn::ImportValue: !Sub ${Stage}-${Tenant}-event-bus
